1.
Given an array of integers, return indices of the two numbers such that they add up to a specific target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.

class Solution
{
public:
     vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> my_map;
        vector<int> res;
        for (int i = 0; i < nums.size(); ++i) {
            my_map[nums[i]] = i;
        }
        for (int i = 0; i < nums.size(); ++i) {
            int t = target - nums[i];
            if (my_map.count(t) && my_map[t] != i) {
                res.push_back(i);
                res.push_back(my_map[t]);
                break;
            }
        }
        return res;
    }
};

2.
Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k.

class Solution {
public:
    bool containsNearbyDuplicate(vector<int>& nums, int k) {
        if(nums.size()<=1)
            return false;
        map<int,int> myMap;
        for(int i=0;i!=nums.size();++i)
        {
            if(myMap.count(nums[i])&&(1))
            {
                if(i-myMap[nums[i]]<=k)
                    return true;
            }
            else
            {
                myMap[nums[i]]=i;
            }
        }
        return false;
    }
};
